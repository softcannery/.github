# Build and push docker images to GCR
name: 'github-docker-registry'
description: Build Docker image and push to Github registry

inputs:
  image-name:
    required: true
    description: Docker image name
    default: ''
  chart-path:
    required: false
    description: set custom chart path
    default: './'
  git-token:
    description: the git token used to operate on the git repository. If not specified it's loaded from the git credentials file
    required: true
    default: ''
  version:
    description: set version
    required: false
    default: 'snapshot'
  release:
    description: is release
    required: false
    default: 'true'
  git-username:
    description: the git username used to operate on the git repository. If not specified it's loaded from the git credentials file
    required: false
    default: ${{ github.actor }}
  git-author-name:
    description: the user name to git commit
    required: false
    default: ''
  git-author-email:
    description: the user email to git commit
    required: false
    default: 'no-reply@no-reply.users.github.com'
runs:
  using: composite
  steps:
    - name: Log in to GitHub Docker Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ inputs.git-username }}
        password: ${{ inputs.git-token }}
    - name: Generate tags
      shell: bash
      run: |
        if [[ ${{ inputs.release }} == 'true' ]]; then
          TAGS="ghcr.io/${{ github.repository }}/${{ inputs.image-name }}:${{ github.sha }}
          ghcr.io/${{ github.repository }}/${{ inputs.image-name }}:${{ inputs.version }}
          ghcr.io/${{ github.repository }}/${{ inputs.image-name }}:latest"
          echo "TAGS<<EOF" >> $GITHUB_ENV
          echo $TAGS >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          TAGS="ghcr.io/${{ github.repository }}/${{ inputs.image-name }}:${{ inputs.version }}"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
        fi
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ inputs.chart-path }}
        push: true
        tags: ${{ env.TAGS }}
